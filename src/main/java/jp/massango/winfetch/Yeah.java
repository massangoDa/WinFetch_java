package jp.massango.winfetch;

import com.formdev.flatlaf.FlatDarculaLaf;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;

import static jp.massango.winfetch.ConvertUupStart.StartUUP;
import static jp.massango.winfetch.MessageLogger.log;

public class Yeah extends JFrame {
    private JPanel mainPanel;
    private JPanel ConsolePanel;
    private JPanel SearchPanel;
    private JPanel SomePanel;
    private JComboBox comboBox1;
    private JComboBox comboBox2;
    private JButton Search_Button;
    private JComboBox<String> comboBox3;
    private JButton versionChoiceButton;
    private JTextPane textPane1;
    private JButton clearListButton;
    private JButton createIsoButton;
    private JButton downloadButton;
    private JProgressBar progressBar1;
    private JComboBox comboBox4;
    private MessageLogger messageLogger;

    private String uuid;
    private String lang;


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1, true, false));
        mainPanel.setMaximumSize(new Dimension(900, 550));
        mainPanel.setMinimumSize(new Dimension(900, 550));
        SearchPanel = new JPanel();
        SearchPanel.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(SearchPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(203, 178), null, 0, true));
        final JLabel label1 = new JLabel();
        label1.setText("アーキテクチャ：");
        SearchPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("バージョン：");
        SearchPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox1 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("amd64");
        defaultComboBoxModel1.addElement("arm64");
        comboBox1.setModel(defaultComboBoxModel1);
        SearchPanel.add(comboBox1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox2 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("Windows 11");
        defaultComboBoxModel2.addElement("Windows 10");
        comboBox2.setModel(defaultComboBoxModel2);
        SearchPanel.add(comboBox2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Search_Button = new JButton();
        Search_Button.setText("検索");
        SearchPanel.add(Search_Button, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("言語：");
        SearchPanel.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox4 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("ja-jp");
        defaultComboBoxModel3.addElement("ar-sa");
        defaultComboBoxModel3.addElement("it-it");
        defaultComboBoxModel3.addElement("uk-ua");
        defaultComboBoxModel3.addElement("et-ee");
        defaultComboBoxModel3.addElement("nl-nl");
        defaultComboBoxModel3.addElement("el-gr");
        defaultComboBoxModel3.addElement("hr-hr");
        defaultComboBoxModel3.addElement("sv-se");
        defaultComboBoxModel3.addElement("es-es");
        defaultComboBoxModel3.addElement("es-mx");
        defaultComboBoxModel3.addElement("sk-sk");
        defaultComboBoxModel3.addElement("sl-si");
        defaultComboBoxModel3.addElement("sr-latn-rs");
        defaultComboBoxModel3.addElement("th-th");
        defaultComboBoxModel3.addElement("cs-cz");
        defaultComboBoxModel3.addElement("da-dk");
        defaultComboBoxModel3.addElement("tr-tr");
        defaultComboBoxModel3.addElement("de-de");
        defaultComboBoxModel3.addElement("nb-no");
        defaultComboBoxModel3.addElement("hu-hu");
        defaultComboBoxModel3.addElement("fi-fi");
        defaultComboBoxModel3.addElement("fr-ca");
        defaultComboBoxModel3.addElement("fr-fr");
        defaultComboBoxModel3.addElement("bg-bg");
        defaultComboBoxModel3.addElement("he-il");
        defaultComboBoxModel3.addElement("pt-br");
        defaultComboBoxModel3.addElement("pt-pt");
        defaultComboBoxModel3.addElement("pl-pl");
        defaultComboBoxModel3.addElement("lv-lv");
        defaultComboBoxModel3.addElement("lt-lt");
        defaultComboBoxModel3.addElement("ro-ro");
        defaultComboBoxModel3.addElement("ru-ru");
        defaultComboBoxModel3.addElement("zh-cn");
        defaultComboBoxModel3.addElement("zh-tw");
        defaultComboBoxModel3.addElement("en-gb");
        defaultComboBoxModel3.addElement("en-us");
        defaultComboBoxModel3.addElement("ko-kr");
        defaultComboBoxModel3.addElement("neutral");
        comboBox4.setModel(defaultComboBoxModel3);
        SearchPanel.add(comboBox4, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ConsolePanel = new JPanel();
        ConsolePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(ConsolePanel, new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, new Dimension(516, 555), 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        ConsolePanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textPane1 = new JTextPane();
        textPane1.setBackground(new Color(-15987700));
        textPane1.setEditable(true);
        scrollPane1.setViewportView(textPane1);
        SomePanel = new JPanel();
        SomePanel.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(SomePanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("バージョン一覧");
        SomePanel.add(label4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox3 = new JComboBox();
        comboBox3.setEditable(false);
        comboBox3.setEnabled(true);
        SomePanel.add(comboBox3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        versionChoiceButton = new JButton();
        versionChoiceButton.setEnabled(true);
        versionChoiceButton.setText("最新バージョンを選択する");
        SomePanel.add(versionChoiceButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        SomePanel.add(panel1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, true));
        clearListButton = new JButton();
        clearListButton.setText("リセット");
        panel1.add(clearListButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        createIsoButton = new JButton();
        createIsoButton.setText("ISO作成");
        panel1.add(createIsoButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        downloadButton = new JButton();
        downloadButton.setText("ダウンロード");
        panel1.add(downloadButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        SomePanel.add(panel2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, true));
        final JLabel label5 = new JLabel();
        label5.setText("ダウンロード進捗状況");
        panel2.add(label5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressBar1 = new JProgressBar();
        panel2.add(progressBar1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public Yeah() {
        try {
            UIManager.setLookAndFeel(new FlatDarculaLaf());
        } catch (UnsupportedLookAndFeelException e) {
            throw new RuntimeException(e);
        }
        $$$setupUI$$$();
        MessageLogger.initialize(textPane1);

        setTitle("WinFetch - ISOダウンローダー");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setContentPane(mainPanel);
        setSize(900, 550);
        setVisible(true);

        log("このソフトは、UUP-DUMP APIを使用しています。", Color.WHITE);
        log("～～～～～注意事項～～～～～", Color.YELLOW);
        log("※ 全ボックス選択後に「検索」を押してください。", Color.YELLOW);
        log("もし、ファイルをダウンロードが完了後、isoを作るためのcmd使用許可を間違えてしなかった場合は、ISO作成ボタンを押してください。", Color.YELLOW);
        log("バージョンを変えたい場合は、リセットボタンを押してください。", Color.YELLOW);
        log("～～～～～～～～～～～～～～", Color.YELLOW);

        Search_Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String architecture = (String) comboBox1.getSelectedItem();
                String version = (String) comboBox2.getSelectedItem();
                String lang = (String) comboBox4.getSelectedItem();

                if (Objects.isNull(architecture) || Objects.isNull(version) || Objects.isNull(lang)) {
                    System.out.println("いずれかの値がnullです。処理を中断します。");
                    return;
                }

                log(architecture + "が選択されました。", Color.CYAN);
                log(version + "が選択されました。", Color.CYAN);
                log(lang + "が選択されました。", Color.CYAN);
                log("バージョン一覧を取得中...。", Color.YELLOW);

                IsoListManager changer = new IsoListManager(Yeah.this);

                CompletableFuture.runAsync(() ->
                {
                    changer.IsoList(version, architecture, lang);
                });
            }
        });

        versionChoiceButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (comboBox3.getItemCount() == 0) {
                    JOptionPane.showMessageDialog(mainPanel, "検索をしてから押してください。", "エラー", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                comboBox3.setSelectedItem(comboBox3.getItemAt(0));
                log("最新ビルドバージョンが選択されました。", Color.CYAN);
            }
        });

        clearListButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                comboBox3.removeAllItems();
                log("ビルドバージョンリストのリセットが完了しました。", Color.WHITE);
                JOptionPane.showMessageDialog(mainPanel, "ビルドバージョンリストのリセットが完了しました。", "リセット完了", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        downloadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                log("ダウンロードを開始します", Color.WHITE);
                UUPLinkFetch uupLinkFetch = new UUPLinkFetch(Yeah.this);

                String selectedItem = (String) comboBox3.getSelectedItem();

                CompletableFuture.runAsync(() ->
                {
                    uupLinkFetch.uupFetch(selectedItem, uuid, progress -> {
                        progressBar1.setValue(progress);
                        progressBar1.setString(progress + "%");
                    });
                });
            }
        });

        createIsoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createIso();
            }
        });
    }

    public void createIso() {
        log("convert-UUP.cmdを実行します...", Color.WHITE);
        JOptionPane.showMessageDialog(mainPanel, "cmd使用許可が出ますので、「はい」を選択してください。", "注意", JOptionPane.INFORMATION_MESSAGE);
        try {
            StartUUP();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void addItemToComboBox(String item) {
        comboBox3.addItem(item);
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public static void Logg(String message) {
        log(message, Color.WHITE);
    }

    public static void Logg(String message, Color color) {
        log(message, color);
    }

    public String getLang() {
        return lang = (String) comboBox4.getSelectedItem();
    }
}